package com.techelevator.city;

import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;

public class JDBCCityDAO implements CityDAO {

	private JdbcTemplate jdbcTemplate;

	public JDBCCityDAO(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	@Override
	public void save(City newCity) {  //since all the table columns are required to be sure that all variables in the city object
		                              //passed to us are not null before we try to INSERT the data into the data base. 
		                              //if any of the values in the city object passed to us are null - throw an exception with a message
	if (newCity.getName() == null   //Since INT cant be NUll we dont need to check Population.
			|| newCity.getCountryCode() == null
		    || newCity.getCountryCode() == null
		    || newCity.getDistrict() == null)
		                              throw new RuntimeException("at least one value in the city object is null");
	
		String sqlInsertCity = "INSERT INTO city(id, name, countrycode, district, population) "
				+ "VALUES(?, ?, ?, ?, ?)";
		newCity.setId(getNextCityId());
		jdbcTemplate.update(sqlInsertCity, newCity.getId(), newCity.getName(), newCity.getCountryCode(),
				newCity.getDistrict(), newCity.getPopulation());
	}

	@Override
	public City findCityById(long id) {
		City theCity = null;
		String sqlFindCityById = "SELECT id, name, countrycode, district, population " + "FROM city " + "WHERE id = ?";
		SqlRowSet results = jdbcTemplate.queryForRowSet(sqlFindCityById, id);
		if (results.next()) {
			theCity = mapRowToCity(results);
		}
		return theCity;
	}

	@Override
	public List<City> findCityByCountryCode(String countryCode) {
		ArrayList<City> cities = new ArrayList<>();
		String sqlFindCityByCountryCode = "SELECT id, name, countrycode, district, population " + "FROM city "
				+ "WHERE countrycode = ?";
		SqlRowSet results = jdbcTemplate.queryForRowSet(sqlFindCityByCountryCode, countryCode);
		while (results.next()) {
			City theCity = mapRowToCity(results);
			cities.add(theCity);
		}
		return cities;
	}

	@Override
	public List<City> findCityByDistrict(String district) {
		ArrayList<City> cities = new ArrayList<>();
		String sqlFindCityByCountryCode = "SELECT id, name, countrycode, district, population " + "FROM city "
				+ "WHERE district = ?";
		SqlRowSet results = jdbcTemplate.queryForRowSet(sqlFindCityByCountryCode, district);
		while (results.next()) {
			City theCity = mapRowToCity(results);
			cities.add(theCity);
		}
		return cities;
	}

	@Override
	public void update(City city) {
		String sql = "UPDATE city set name = ?, countrycode = ?, district = ?, population = ? WHERE id = ?";
		jdbcTemplate.update(sql,city.getName(),city.getCountryCode(),city.getDistrict(),city.getPopulation(),city.getId());
	}

	@Override
	public void delete(long id) {
		jdbcTemplate.update("DELETE FROM city WHERE id = ?",id);
	}

	private long getNextCityId() {  //get the next value for city_id from the DBM
		SqlRowSet nextIdResult = jdbcTemplate.queryForRowSet("SELECT nextval('seq_city_id')");
		if (nextIdResult.next()) {     //if a value was returned from the DBM
			return nextIdResult.getLong(1);  //retrieve from SQLRowSet result and return the caller
		} else {  //if no value was returned - we have not value for the city id - thats not good
			throw new RuntimeException("Something went wrong while getting an id for the new city");
		}  //Whenever there is an application error condition we can either ignore it, (2) display an error message 
		   //and continue execution, (3) display an error message and terminate the program or (4) We can throw
		   // and exception which will terminate hte program with the stack trace and error messages generated by system
	}      //We chose to throw an exception bc we want the stack trace displayed so we can see how we got to the error
           //in this situation not having a city id would be a big error so we threw an exception instead of ignore it
	       //RunTimeException is the super class of all exceptions - a generic exception 
	      // Throw a RunTimeException if you dont have a custom exception or system exception for what is wrong
	       //When you throw an exception you may specify a message to be included with system output displayed for the exception
	      //to indicate what application error occured and why you threw exception
	
	private City mapRowToCity(SqlRowSet results) {
		City theCity;
		theCity = new City();
		theCity.setId(results.getLong("id"));
		theCity.setName(results.getString("name"));
		theCity.setCountryCode(results.getString("countrycode"));
		theCity.setDistrict(results.getString("district"));
		theCity.setPopulation(results.getInt("population"));
		return theCity;
	}
}
